/*
 * This file is generated by jOOQ.
 */
package org.mvasylchuk.pfcc.jooq.tables;


import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.mvasylchuk.pfcc.jooq.Keys;
import org.mvasylchuk.pfcc.jooq.Pfcc;
import org.mvasylchuk.pfcc.jooq.tables.records.DishIngredientsRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DishIngredients extends TableImpl<DishIngredientsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>pfcc.dish_ingredients</code>
     */
    public static final DishIngredients DISH_INGREDIENTS = new DishIngredients();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DishIngredientsRecord> getRecordType() {
        return DishIngredientsRecord.class;
    }

    /**
     * The column <code>pfcc.dish_ingredients.dish_id</code>.
     */
    public final TableField<DishIngredientsRecord, Long> DISH_ID = createField(DSL.name("dish_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>pfcc.dish_ingredients.ingredient_id</code>.
     */
    public final TableField<DishIngredientsRecord, Long> INGREDIENT_ID = createField(DSL.name("ingredient_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>pfcc.dish_ingredients.ingredient_weight</code>.
     */
    public final TableField<DishIngredientsRecord, BigDecimal> INGREDIENT_WEIGHT = createField(DSL.name("ingredient_weight"), SQLDataType.DECIMAL(9, 4).nullable(false), this, "");

    private DishIngredients(Name alias, Table<DishIngredientsRecord> aliased) {
        this(alias, aliased, null);
    }

    private DishIngredients(Name alias, Table<DishIngredientsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>pfcc.dish_ingredients</code> table reference
     */
    public DishIngredients(String alias) {
        this(DSL.name(alias), DISH_INGREDIENTS);
    }

    /**
     * Create an aliased <code>pfcc.dish_ingredients</code> table reference
     */
    public DishIngredients(Name alias) {
        this(alias, DISH_INGREDIENTS);
    }

    /**
     * Create a <code>pfcc.dish_ingredients</code> table reference
     */
    public DishIngredients() {
        this(DSL.name("dish_ingredients"), null);
    }

    public <O extends Record> DishIngredients(Table<O> child, ForeignKey<O, DishIngredientsRecord> key) {
        super(child, key, DISH_INGREDIENTS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Pfcc.PFCC;
    }

    @Override
    public UniqueKey<DishIngredientsRecord> getPrimaryKey() {
        return Keys.KEY_DISH_INGREDIENTS_PRIMARY;
    }

    @Override
    public List<ForeignKey<DishIngredientsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.DISH_INGREDIENTS_IBFK_1, Keys.DISH_INGREDIENTS_IBFK_2);
    }

    private transient Dish _dishIngredientsIbfk_1;
    private transient Dish _dishIngredientsIbfk_2;

    /**
     * Get the implicit join path to the <code>pfcc.dish</code> table, via the
     * <code>dish_ingredients_ibfk_1</code> key.
     */
    public Dish dishIngredientsIbfk_1() {
        if (_dishIngredientsIbfk_1 == null)
            _dishIngredientsIbfk_1 = new Dish(this, Keys.DISH_INGREDIENTS_IBFK_1);

        return _dishIngredientsIbfk_1;
    }

    /**
     * Get the implicit join path to the <code>pfcc.dish</code> table, via the
     * <code>dish_ingredients_ibfk_2</code> key.
     */
    public Dish dishIngredientsIbfk_2() {
        if (_dishIngredientsIbfk_2 == null)
            _dishIngredientsIbfk_2 = new Dish(this, Keys.DISH_INGREDIENTS_IBFK_2);

        return _dishIngredientsIbfk_2;
    }

    @Override
    public DishIngredients as(String alias) {
        return new DishIngredients(DSL.name(alias), this);
    }

    @Override
    public DishIngredients as(Name alias) {
        return new DishIngredients(alias, this);
    }

    @Override
    public DishIngredients as(Table<?> alias) {
        return new DishIngredients(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public DishIngredients rename(String name) {
        return new DishIngredients(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DishIngredients rename(Name name) {
        return new DishIngredients(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public DishIngredients rename(Table<?> name) {
        return new DishIngredients(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, Long, BigDecimal> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super Long, ? super Long, ? super BigDecimal, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super Long, ? super Long, ? super BigDecimal, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
