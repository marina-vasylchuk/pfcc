/*
 * This file is generated by jOOQ.
 */
package org.mvasylchuk.pfcc.jooq.tables.records;


import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record5;
import org.jooq.Row5;
import org.jooq.impl.UpdatableRecordImpl;
import org.mvasylchuk.pfcc.jooq.tables.SecurityTokens;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SecurityTokensRecord extends UpdatableRecordImpl<SecurityTokensRecord> implements Record5<Long, String, Long, String, Byte> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>pfcc.security_tokens.id</code>.
     */
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>pfcc.security_tokens.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>pfcc.security_tokens.code</code>.
     */
    public void setCode(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>pfcc.security_tokens.code</code>.
     */
    public String getCode() {
        return (String) get(1);
    }

    /**
     * Setter for <code>pfcc.security_tokens.user_id</code>.
     */
    public void setUserId(Long value) {
        set(2, value);
    }

    /**
     * Getter for <code>pfcc.security_tokens.user_id</code>.
     */
    public Long getUserId() {
        return (Long) get(2);
    }

    /**
     * Setter for <code>pfcc.security_tokens.type</code>.
     */
    public void setType(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>pfcc.security_tokens.type</code>.
     */
    public String getType() {
        return (String) get(3);
    }

    /**
     * Setter for <code>pfcc.security_tokens.is_active</code>.
     */
    public void setIsActive(Byte value) {
        set(4, value);
    }

    /**
     * Getter for <code>pfcc.security_tokens.is_active</code>.
     */
    public Byte getIsActive() {
        return (Byte) get(4);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record5 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row5<Long, String, Long, String, Byte> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    @Override
    public Row5<Long, String, Long, String, Byte> valuesRow() {
        return (Row5) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return SecurityTokens.SECURITY_TOKENS.ID;
    }

    @Override
    public Field<String> field2() {
        return SecurityTokens.SECURITY_TOKENS.CODE;
    }

    @Override
    public Field<Long> field3() {
        return SecurityTokens.SECURITY_TOKENS.USER_ID;
    }

    @Override
    public Field<String> field4() {
        return SecurityTokens.SECURITY_TOKENS.TYPE;
    }

    @Override
    public Field<Byte> field5() {
        return SecurityTokens.SECURITY_TOKENS.IS_ACTIVE;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getCode();
    }

    @Override
    public Long component3() {
        return getUserId();
    }

    @Override
    public String component4() {
        return getType();
    }

    @Override
    public Byte component5() {
        return getIsActive();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getCode();
    }

    @Override
    public Long value3() {
        return getUserId();
    }

    @Override
    public String value4() {
        return getType();
    }

    @Override
    public Byte value5() {
        return getIsActive();
    }

    @Override
    public SecurityTokensRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public SecurityTokensRecord value2(String value) {
        setCode(value);
        return this;
    }

    @Override
    public SecurityTokensRecord value3(Long value) {
        setUserId(value);
        return this;
    }

    @Override
    public SecurityTokensRecord value4(String value) {
        setType(value);
        return this;
    }

    @Override
    public SecurityTokensRecord value5(Byte value) {
        setIsActive(value);
        return this;
    }

    @Override
    public SecurityTokensRecord values(Long value1, String value2, Long value3, String value4, Byte value5) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached SecurityTokensRecord
     */
    public SecurityTokensRecord() {
        super(SecurityTokens.SECURITY_TOKENS);
    }

    /**
     * Create a detached, initialised SecurityTokensRecord
     */
    public SecurityTokensRecord(Long id, String code, Long userId, String type, Byte isActive) {
        super(SecurityTokens.SECURITY_TOKENS);

        setId(id);
        setCode(code);
        setUserId(userId);
        setType(type);
        setIsActive(isActive);
        resetChangedOnNotNull();
    }
}
