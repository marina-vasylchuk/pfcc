/*
 * This file is generated by jOOQ.
 */
package org.mvasylchuk.pfcc.jooq.tables;


import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function11;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.mvasylchuk.pfcc.jooq.Indexes;
import org.mvasylchuk.pfcc.jooq.Keys;
import org.mvasylchuk.pfcc.jooq.Pfcc;
import org.mvasylchuk.pfcc.jooq.tables.records.FoodRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Food extends TableImpl<FoodRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>pfcc.food</code>
     */
    public static final Food FOOD = new Food();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FoodRecord> getRecordType() {
        return FoodRecord.class;
    }

    /**
     * The column <code>pfcc.food.id</code>.
     */
    public final TableField<FoodRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field(DSL.raw("nextval(`pfcc`.`food_id_seq`)"), SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>pfcc.food.name</code>.
     */
    public final TableField<FoodRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>pfcc.food.type</code>.
     */
    public final TableField<FoodRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR(10).nullable(false), this, "");

    /**
     * The column <code>pfcc.food.protein</code>.
     */
    public final TableField<FoodRecord, BigDecimal> PROTEIN = createField(DSL.name("protein"), SQLDataType.DECIMAL(9, 4).nullable(false), this, "");

    /**
     * The column <code>pfcc.food.fat</code>.
     */
    public final TableField<FoodRecord, BigDecimal> FAT = createField(DSL.name("fat"), SQLDataType.DECIMAL(9, 4).nullable(false), this, "");

    /**
     * The column <code>pfcc.food.carbohydrates</code>.
     */
    public final TableField<FoodRecord, BigDecimal> CARBOHYDRATES = createField(DSL.name("carbohydrates"), SQLDataType.DECIMAL(9, 4).nullable(false), this, "");

    /**
     * The column <code>pfcc.food.calories</code>.
     */
    public final TableField<FoodRecord, BigDecimal> CALORIES = createField(DSL.name("calories"), SQLDataType.DECIMAL(9, 4).nullable(false), this, "");

    /**
     * The column <code>pfcc.food.is_hidden</code>.
     */
    public final TableField<FoodRecord, Byte> IS_HIDDEN = createField(DSL.name("is_hidden"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>pfcc.food.owner_id</code>.
     */
    public final TableField<FoodRecord, Long> OWNER_ID = createField(DSL.name("owner_id"), SQLDataType.BIGINT.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>pfcc.food.description</code>.
     */
    public final TableField<FoodRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.CLOB)), this, "");

    /**
     * The column <code>pfcc.food.deleted</code>.
     */
    public final TableField<FoodRecord, Byte> DELETED = createField(DSL.name("deleted"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.TINYINT)), this, "");

    private Food(Name alias, Table<FoodRecord> aliased) {
        this(alias, aliased, null);
    }

    private Food(Name alias, Table<FoodRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>pfcc.food</code> table reference
     */
    public Food(String alias) {
        this(DSL.name(alias), FOOD);
    }

    /**
     * Create an aliased <code>pfcc.food</code> table reference
     */
    public Food(Name alias) {
        this(alias, FOOD);
    }

    /**
     * Create a <code>pfcc.food</code> table reference
     */
    public Food() {
        this(DSL.name("food"), null);
    }

    public <O extends Record> Food(Table<O> child, ForeignKey<O, FoodRecord> key) {
        super(child, key, FOOD);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Pfcc.PFCC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.FOOD_OWNER_ID);
    }

    @Override
    public UniqueKey<FoodRecord> getPrimaryKey() {
        return Keys.KEY_FOOD_PRIMARY;
    }

    @Override
    public List<ForeignKey<FoodRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FOOD_IBFK_1);
    }

    private transient Users _users;

    /**
     * Get the implicit join path to the <code>pfcc.users</code> table.
     */
    public Users users() {
        if (_users == null)
            _users = new Users(this, Keys.FOOD_IBFK_1);

        return _users;
    }

    @Override
    public Food as(String alias) {
        return new Food(DSL.name(alias), this);
    }

    @Override
    public Food as(Name alias) {
        return new Food(alias, this);
    }

    @Override
    public Food as(Table<?> alias) {
        return new Food(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Food rename(String name) {
        return new Food(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Food rename(Name name) {
        return new Food(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Food rename(Table<?> name) {
        return new Food(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<Long, String, String, BigDecimal, BigDecimal, BigDecimal, BigDecimal, Byte, Long, String, Byte> fieldsRow() {
        return (Row11) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function11<? super Long, ? super String, ? super String, ? super BigDecimal, ? super BigDecimal, ? super BigDecimal, ? super BigDecimal, ? super Byte, ? super Long, ? super String, ? super Byte, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function11<? super Long, ? super String, ? super String, ? super BigDecimal, ? super BigDecimal, ? super BigDecimal, ? super BigDecimal, ? super Byte, ? super Long, ? super String, ? super Byte, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
